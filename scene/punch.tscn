[gd_scene load_steps=10 format=2]

[ext_resource path="res://script/punch.gd" type="Script" id=2]
[ext_resource path="res://theme/scoreLabel.tres" type="Theme" id=3]
[ext_resource path="res://scene/menu.tscn" type="PackedScene" id=4]
[ext_resource path="res://theme/mainButton.tres" type="Theme" id=5]
[ext_resource path="res://data/audio/click4.ogg" type="AudioStream" id=6]

[sub_resource type="StyleBoxFlat" id=11]
bg_color = Color( 0.247059, 0.776471, 0.678431, 1 )
border_width_left = 8
border_width_top = 8
border_width_right = 8
border_width_bottom = 8
border_color = Color( 0.129412, 0.184314, 0.176471, 1 )
corner_radius_top_left = 12
corner_radius_top_right = 12
corner_radius_bottom_right = 12
corner_radius_bottom_left = 12

[sub_resource type="Theme" id=10]
Panel/styles/panel = SubResource( 11 )

[sub_resource type="Shader" id=12]
code = "/*
	ボロノイ神経風 背景シェーダー by あるる（きのもと 結衣） @arlez80
	Voronoi Synapse-ish Background Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type canvas_item;

uniform vec2 pixel_size = vec2( 0.001, 0.001 );

uniform float voronoi_scale = 20.0;
uniform float voronoi_seed = 0.0;

uniform float electric_scale = 20.0;
uniform float electric_speed = 1.0;
uniform float electric_power = 3.0;

vec2 random( vec2 pos )
{ 
	return fract(
		sin(
			vec2(
				dot(pos, vec2(12.9898,78.233))
			,	dot(pos, vec2(-148.998,-65.233))
			)
		) * 43758.5453
	);
}

vec2 voronoi( vec2 uv )
{
	vec2 v = uv * voronoi_scale + vec2( voronoi_seed, voronoi_seed );
	vec2 v_floor = floor( v );
	vec2 v_fract = fract( v );
	vec2 min_p = vec2( 0.0, 0.0 );
	float min_dist = 2.0;

	for( int y = -1; y <= 1; y ++ ) {
		for( int x = -1; x <= 1; x ++ ) {
			vec2 n = vec2( float( x ), float( y ) );
			vec2 p = random( v_floor + n );
			vec2 diff = p + n;
			float d = distance( v_fract, diff );

			min_p = mix( min_p, ( v + diff - v_fract ) / voronoi_scale, float( d < min_dist ) );
			min_dist = min( min_dist, d );
		}
	}

	return min_p;
}

vec2 sobel_coord_conv( vec2 v, int x, int y )
{
	return v + vec2( float( x-1 ), float( y-1 ) ) * pixel_size;
}

float sobel( vec2 uv )
{
	vec2 sobel[9] = {
		voronoi( sobel_coord_conv( uv, 0, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 1, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 2, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 0, 1 ) )
	,	vec2( 0.0 )	// 未使用
	,	voronoi( sobel_coord_conv( uv, 2, 1 ) )
	,	voronoi( sobel_coord_conv( uv, 0, 2 ) )
	,	voronoi( sobel_coord_conv( uv, 1, 2 ) )
	,	voronoi( sobel_coord_conv( uv, 2, 2 ) )
	};
	vec2 sobel_src_x = (
		sobel[0] * -1.0
	+	sobel[3] * -2.0
	+	sobel[6] * -1.0
	+	sobel[2] * 1.0
	+	sobel[5] * 2.0
	+	sobel[8] * 1.0
	);
	vec2 sobel_src_y = (
		sobel[0] * -1.0
	+	sobel[1] * -2.0
	+	sobel[2] * -1.0
	+	sobel[6] * 1.0
	+	sobel[7] * 2.0
	+	sobel[8] * 1.0
	);

	return length( sqrt( sobel_src_x * sobel_src_x + sobel_src_y * sobel_src_y ) );
}

float electric( vec2 uv )
{
	return clamp( sobel( uv ) * mod( ( uv.x - uv.y ) * electric_scale / 3.0 - TIME * electric_speed, 1.0 ) * electric_power, 0.0, 1.0 );
}

void fragment( )
{
	COLOR = vec4( vec3( electric( UV + TIME * 0.1 ), electric( UV * 0.5 + TIME * 0.1 ), electric( UV * 0.25 + TIME * 0.1 ) ), 1.0 );
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/pixel_size = Vector2( 0.001, 0.001 )
shader_param/voronoi_scale = 20.0
shader_param/voronoi_seed = 0.0
shader_param/electric_scale = 20.0
shader_param/electric_speed = 0.5
shader_param/electric_power = 2.745

[node name="punch" type="Node"]
script = ExtResource( 2 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]

[node name="menu" parent="." instance=ExtResource( 4 )]

[node name="Score" type="CanvasLayer" parent="."]
pause_mode = 2
layer = 10
visible = false

[node name="Panel" type="Panel" parent="Score"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -250.0
margin_top = -200.0
margin_right = 250.0
margin_bottom = 200.0
theme = SubResource( 10 )

[node name="Button" type="Button" parent="Score"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -112.0
margin_top = 60.0
margin_right = 110.0
margin_bottom = 184.0
grow_horizontal = 2
theme = ExtResource( 5 )
text = "主菜单"

[node name="VBoxContainer" type="VBoxContainer" parent="Score"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -240.0
margin_top = -188.0
margin_right = 80.0
margin_bottom = 50.0
alignment = 1

[node name="now" type="Label" parent="Score/VBoxContainer"]
margin_right = 400.0
margin_bottom = 117.0
theme = ExtResource( 3 )
text = "当前分:"

[node name="max" type="Label" parent="Score/VBoxContainer"]
margin_top = 121.0
margin_right = 400.0
margin_bottom = 238.0
theme = ExtResource( 3 )
text = "最高分:"

[node name="click" type="AudioStreamPlayer" parent="Score"]
stream = ExtResource( 6 )

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 13 )
anchor_right = 1.0
anchor_bottom = 1.0

[connection signal="pressed" from="Score/Button" to="." method="_on_Button_pressed"]
